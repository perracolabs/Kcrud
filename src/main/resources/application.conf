# Copyright (c) 2023 Perraco Labs. All rights reserved.
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>

# For configuration detailed information see:
# https://ktor.io/docs/configuration-file.html
# https://ktor.io/docs/configuration-file.html#predefined-properties

ktor {

	# Application modules. Usually, it is a fully qualified name of the main class.
	application {
		modules: [com.kcrud.core.ApplicationKt.module]
	}

	# Set to 'true' to enable development mode.
	# This make Ktor to enables features like auto-reload, better tracing, etc.,
	# See: https://ktor.io/docs/development-mode.html
	development: true
	development: ${?KCRUD_DEVELOPMENT}

	# Unique machine identifier.
	# Used to generate unique IDs for calls traceability.
	machineId: 1
	machineId: ${?KCRUD_MACHINE_ID}

	deployment {
		# The deployment type the application is running on.
		# Not to confuse with the 'development' mode flag.
		# Choices: DEV, TEST, PROD
		type: "DEV"
		type: ${?KCRUD_DEPLOYMENT_TYPE}

		port: 8080
		port: ${?KCRUD_DEPLOYMENT_PORT}

		sslPort: 443
		sslPort: ${?KCRUD_DEPLOYMENT_SSL_PORT}

		host: "127.0.0.1"
		host: ${?KCRUD_DEPLOYMENT_HOST}

		// The deployment API version used in REST endpoints.
		apiVersion: "v1"
		apiVersion: ${?KCRUD_DEPLOYMENT_API_VERSION}

		// The watch paths are directories Ktor will monitor for changes.
		// Useful when development mode is enabled, to automatically
		// reload classes/resources when modified.
		watch: [classes, resources]
	}

	cors {
		// Host examples:
		// Allow requests from both http and https, so "http://example.com" and "https://example.com".
		// allowHost(host="example.com")
		//
		// Allow requests from "http://example.com:8081" and "https://example.com:8081".
		// allowHost(host="example.com:8081")
		//
		// Allow requests from "http://api.example.com" and "https://api.example.com".
		// allowHost(host="example.com", subDomains = listOf("api"))
		//
		// Allows requests from "http://example.com" and "https://example.com" specifically,
		// though this is redundant with the first allowHost invocation in this example.
		// allowHost(host="example.com", schemes = listOf("http", "https"))
		allowedHosts: ["*"]  # Allowed either a list, or a single string with comma-delimited values.
		allowedHosts: ${?KCRUD_CORS_ALLOWED_HOSTS}
	}

	database {
		# The database connection pool size to be used.
		# 0 for no connection pooling.
		connectionPoolSize = 10
		connectionPoolSize = ${?KCRUD_DATABASE_CONNECTION_POOL_SIZE}

		# The database mode, either only in memory or file-persistent.
		# Choices: IN_MEMORY, PERSISTENT
		mode: "PERSISTENT"
		mode: ${?KCRUD_DATABASE_MODE}

		# The database type to be used.
		# Choices: H2, SQLITE
		dbType: "H2"
		dbType: ${?KCRUD_DATABASE_TYPE}

		// The database name.
		name: "dbv1"
		name: ${?KCRUD_DATABASE_NAME}

		// The database path when using PERSISTENT mode.
		path: "./.database/"
		path: ${?KCRUD_DATABASE_PATH}

		// The database JDBC URL.
		// H2.
		// 		IN_MEMORY: "jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"
		// 		PERSISTENT: "jdbc:h2:file:"${ktor.database.path}${ktor.database.name}
		// SQLITE.
		// 		IN_MEMORY: "jdbc:sqlite:file:test?mode=memory&cache=shared"
		// 		PERSISTENT: "jdbc:sqlite:"${ktor.database.path}${ktor.database.name}".db"
		jdbcUrl = "jdbc:h2:file:"${ktor.database.path}${ktor.database.name}
		jdbcUrl = ${?KCRUD_DATABASE_JDBC_URL}

		// The database JDBC driver.
		// H2: "org.h2.Driver"
		// SQLITE: "org.sqlite.JDBC"
		jdbcDriver = "org.h2.Driver"
		jdbcDriver = ${?KCRUD_DATABASE_JDBC_DRIVER}
	}

	docs {
		# Whether to enable the documentation module, swagger, openapi, redoc.
		isEnabled: true
		isEnabled: ${?KCRUD_DOCS_ENABLED}

		# The documentation file.
		yamlFile: "openapi/documentation.yaml"

		# Th URL path to access the documentation.
		swaggerPath: ${ktor.deployment.apiVersion}"/docs/swagger"
		openApiPath: ${ktor.deployment.apiVersion}"/docs/openapi"
		redocPath: "/redoc.html"
	}

	graphql {
		# Whether to enable the GraphQL module.
		isEnabled: true
		isEnabled: ${?KCRUD_GRAPHQL_ENABLED}

		# The GraphQL framework to use.
		# Choices: "EXPEDIA_GROUP", "K_GRAPHQL"
		framework: "EXPEDIA_GROUP"
		playground: ${?KCRUD_GRAPHQL_FRAMEWORK}

		# Whether to dump the GraphQL schema to a file.
		# The schema file in the root folder.
		# Only used if framework is EXPEDIA_GROUP.
		dumpSchema: true

		# Whether to enable the GraphQL playground.
		playground: true
		playground: ${?KCRUD_GRAPHQL_PLAYGROUND}
	}

	security {

		# Attributes for field level encryption.
		# If any of these values are changed after data has already been encrypted,
		# any previously encrypted field will not be able to be decrypted.
		# So, ideally, these values should be set before any data is inputed into
		# the application, and should not be changed after that.
		# If the attributes are compromised, then the data should be decrypted with
		# the old attributes and then re-encrypted with the new ones.
		encryption {
			# Choices: "AES_256_PBE_CBC", "AES_256_PBE_GCM", "BLOW_FISH", "TRIPLE_DES"
			algorithm: "AES_256_PBE_CBC"
			algorithm: ${?KCRUD_SECURITY_ENCRYPTION_ALGORITHM}

			# The encryption salt used.
			# Only for "AES_256_PBE_CBC" and "AES_256_PBE_GCM".
			salt: "1234567890"
			salt: ${?KCRUD_SECURITY_ENCRYPTION_SALT}

			# The encryption key used.
			key: "kcrud-secret-key-example"
			key: ${?KCRUD_SECURITY_ENCRYPTION_KEY}
		}

		constraints {
			publicApi {
				# Maximum number of requests allowed for the Public API.
				# Default is 2000 requests per second.
				limit: 2000
				limit: ${?KCRUD_SECURITY_CONSTRAINTS_PUBLIC_API_LIMIT}
				refill: 1000 # 1 second.
				refill: ${?KCRUD_SECURITY_CONSTRAINTS_PUBLIC_API_REFILL}
			}

			newToken {
				# Maximum number of requests allowed for a New Authentication Token generation.
				# Default is 100 requests every 10 seconds.
				limit: 100
				limit: ${?KCRUD_SECURITY_CONSTRAINTS_NEW_TOKEN_LIMIT}
				refill: 10000 # 10 seconds.
				refill: ${?KCRUD_SECURITY_CONSTRAINTS_NEW_TOKEN_REFILL}
			}
		}

		jwt {
			# Whether to enable the JWT authentication.
			isEnabled: false
			isEnabled: ${?KCRUD_SECURITY_JWT_ENABLED}

			tokenLifetime: 2592000000 # 30 days, in milliseconds.

			audience: "Kcrud"
			audience: ${?KCRUD_SECURITY_JWT_AUDIENCE}

			realm: "kcrud"
			realm: ${?KCRUD_SECURITY_JWT_REALM}

			issuer: "localhost"
			issuer: ${?KCRUD_SECURITY_JWT_ISSUER}

			secretKey: "kcrud-secret"
			secretKey: ${?KCRUD_SECURITY_JWT_SECRET_KEY}
		}

		basic {
			# Whether to enable the Basic Authentication.
			isEnabled: false
			isEnabled: ${?KCRUD_SECURITY_BASIC_AUTH_ENABLED}

			providerName: "kcrud-basic-auth"
			providerName: ${?KCRUD_SECURITY_BASIC_AUTH_PROVIDER_NAME}

			realm: "kcrud"
			realm: ${?KCRUD_SECURITY_BASIC_AUTH_REALM}

			# Whether to show a custom login form, or the browser built-in one.
			customLoginForm: false

			credentials {
				username: "kcrud"
				username: ${?KCRUD_SECURITY_BASIC_AUTH_USERNAME}

				password: "kcrud1234567"
				password: ${?KCRUD_SECURITY_BASIC_AUTH_PASSWORD}
			}
		}

		# https://ktor.io/docs/ssl.html
		ssl {
			keyStore: "src/main/resources/keystore.p12"
			keyStore: ${?KCRUD_SECURITY_SSL_KEY_STORE}

			keyStoreType: "PKCS12"
			keyStoreType: ${?KCRUD_SECURITY_SSL_KEY_STORE_TYPE}

			keyAlias: "kcrud"
			keyAlias: ${?KCRUD_SECURITY_SSL_KEY_ALIAS}

			keyStorePassword: "kcrud"
			keyStorePassword: ${?KCRUD_SECURITY_SSL_KEY_STORE_PASSWORD}

			privateKeyPassword: "kcrud"
			privateKeyPassword: ${?KCRUD_SECURITY_SSL_PRIVATE_KEY_PASSWORD}
		}
	}
}

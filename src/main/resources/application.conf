# Copyright (c) 2023 Perraco Labs. All rights reserved.
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>

# For configuration detaild information see:
# https://ktor.io/docs/configuration-file.html

# For environment variables use placeholders. For example:
# port: ${?KCRUD_PORT}
# Here, KCRUD_PORT is the name of the system environment variable.
#
# To define a default value place a duplicate key with the same name
# prior to the environment variable key. For example:
# port: 8080
# port: ${?KCRUD_PORT}
# Here if KCRUD_PORT is not set, the port will default to 8080.

ktor {

	# Application modules. Usually, it is a fully qualified name of the main class.
	application {
		modules: [ com.kcrud.ApplicationKt.module ]
	}

	# https://ktor.io/docs/development-mode.html
	development: true
	development: ${?KCRUD_DEVELOPMENT}

	deployment {
		port: 8080
		port: ${?KCRUD_PORT}

		sslPort: 443
		sslPort: ${?KCRUD_SSL_PORT}

		host: "127.0.0.1"
		host: ${?KCRUD_HOST}

		apiVersion: "v1"
		host: ${?KCRUD_API_VERSION}

		autoreload: true
		watch: [ classes, resources ]
	}

	docs {
		isEnabled: true
		isEnabled: ${?KCRUD_SWAGGER_ENABLED}

		yamlFile: "openapi/documentation.yaml"

		swaggerPath: ${ktor.deployment.apiVersion}"/docs/swagger"
		openApiPath: ${ktor.deployment.apiVersion}"/docs/openapi"
		redocPath: "/redoc.html"
	}

	graphql {
		isEnabled: true
		isEnabled: ${?KCRUD_GRAPHQL_ENABLED}

		# "EXPEDIA_GROUP", "K_GRAPHQL"
		framework: "EXPEDIA_GROUP"
		playground: ${?KCRUD_GRAPHQL_FRAMEWORK}

		playground: true
		playground: ${?KCRUD_GRAPHQL_PLAYGROUND}
	}

	security {
		encryption {
			# "AES_256_PBE_CBC", "AES_256_PBE_GCM", "BLOW_FISH", "TRIPLE_DES"
			algorithm: "AES_256_PBE_CBC"
			algorithm: ${?KCRUD_ENCRYPTION_ALGORITHM}

			salt: "1234567890"
			salt: ${?KCRUD_ENCRYPTION_SALT}

			key: "kcrud-secret-key"
			key: ${?KCRUD_ENCRYPTION_KEY}
		}

		jwt {
			isEnabled: false
			isEnabled: ${?KCRUD_JWT_ENABLED}

			tokenLifetime: 2592000000 # 30 days, in milliseconds.

			audience: "Kcrud"
			audience: ${?KCRUD_JWT_AUDIENCE}

			realm: "kcrud"
			realm: ${?KCRUD_JWT_REALM}

			issuer: "localhost"
			issuer: ${?KCRUD_JWT_ISSUER}

			secretKey: "kcrud-secret"
			secretKey: ${?KCRUD_JWT_SECRET_KEY}
		}

		basicAuth {
			isEnabled: false
			isEnabled: ${?KCRUD_BASIC_AUTH_ENABLED}

			providerName: "kcrud-basic-auth"
			providerName: ${?KCRUD_BASIC_AUTH_PROVIDER_NAME}

			realm: "kcrud"
			realm: ${?KCRUD_BASIC_AUTH_REALM}

			loginForm: true

			credentials {
				username: "kcrud"
				username: ${?KCRUD_BASIC_AUTH_USERNAME}

				password: "kcrud1234567"
				password: ${?KCRUD_BASIC_AUTH_PASSWORD}
			}
		}

		# https://ktor.io/docs/ssl.html
		ssl {
			keyStore: "src/main/resources/keystore.p12"
			keyStore: ${?KCRUD_SSL_KEY_STORE}

			keyStoreType: "PKCS12"
			keyStoreType: ${?KCRUD_SSL_KEY_STORE_TYPE}

			keyAlias: "kcrud"
			keyAlias: ${?KCRUD_SSL_KEY_ALIAS}

			keyStorePassword: "kcrud"
			keyStorePassword: ${?KCRUD_SSL_KEY_STORE_PASSWORD}

			privateKeyPassword: "kcrud"
			privateKeyPassword: ${?KCRUD_SSL_PRIVATE_KEY_PASSWORD}
		}
	}
}

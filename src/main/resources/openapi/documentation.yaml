openapi: "3.0.3"
info:
  title: "Kcrud API"
  description: "Kcrud API"
  version: "1.0.0"
servers:
- url: "http://127.0.0.1:8080"
paths:
  /:
    delete:
      description: "Delete All"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Function1_? super Integer"
    get:
      description: "Use the custom login form to handle authentication."
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function1_? super HTML"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
    post:
      description: "Create"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/EmployeeRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Employee"
  /{employee_id}:
    delete:
      description: "Delete by employee ID"
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Function1_? super Integer"
    get:
      description: "Find by employee ID"
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Employee"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    put:
      description: "Update by employee ID"
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/EmployeeRequest"
        required: true
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Employee"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /auth/token/create:
    post:
      description: "Creates a new token and responds with it."
      responses: {}
  /auth/token/form-create:
    get:
      description: "Generate auth tokens via the browser URL."
      responses: { }
  /auth/token/refresh:
    post:
      description: "Endpoint for token refresh. <br> No Basic Authentication is required\
        \ here, but an existing token's validity will be checked. <br> For example,\
        \ in Postman set the endpoint and in the Headers add an Authorization key\
        \ <br> with a 'Bearer' holding a previous valid token."
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HashMap_String"
        "401":
          description: "Unauthorized <br> Token is invalid; respond with an Unauthorized\
            \ status."
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid token."
  /health:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HealthCheck"
  /login:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Authentication failed."
                Example#2:
                  value: "Authentication successful."
  /search:
    post:
      description: "Search (Filter)"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/EmployeeFilterSet"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page_? extends Employee"
  /snowflake/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SnowflakeData"
  /v1/employees/{employee_id}/employments:
    delete:
      description: ""
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Function1_? super Integer"
    get:
      description: ""
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Employment"
    post:
      description: ""
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/EmploymentRequest"
        required: true
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Employment"
  /v1/employees/{employee_id}/employments/{employment_id}:
    delete:
      description: ""
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "employment_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Function1_? super Integer"
    get:
      description: ""
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "employment_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Function1_? super Employment"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    put:
      description: ""
      parameters:
      - name: "employee_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "employment_id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/EmploymentRequest"
        required: true
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Function1_? super Employment"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
components:
  schemas:
    Function1:
      type: "object"
      properties: {}
    Function1_? super Integer:
      type: "object"
    Function1_? super HTML:
      type: "object"
    LocalDate:
      type: "object"
      properties: {}
    ContactRequest:
      type: "object"
      properties:
        email:
          type: "string"
        phone:
          type: "string"
      required:
      - "email"
      - "phone"
    EmployeeRequest:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        dob:
          $ref: "#/components/schemas/LocalDate"
        maritalStatus:
          type: "string"
          enum:
          - "MARRIED"
          - "SINGLE"
          - "DIVORCED"
          - "UNKNOWN"
        honorific:
          type: "string"
          enum:
          - "MR"
          - "MRS"
          - "MS"
          - "DR"
          - "MISS"
          - "UNKNOWN"
        contact:
          $ref: "#/components/schemas/ContactRequest"
      required:
      - "firstName"
      - "lastName"
      - "dob"
      - "maritalStatus"
      - "honorific"
    Contact:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        email:
          type: "string"
        phone:
          type: "string"
      required:
      - "id"
      - "email"
      - "phone"
    Employee:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        firstName:
          type: "string"
        lastName:
          type: "string"
        dob:
          $ref: "#/components/schemas/LocalDate"
        maritalStatus:
          type: "string"
          enum:
          - "MARRIED"
          - "SINGLE"
          - "DIVORCED"
          - "UNKNOWN"
        honorific:
          type: "string"
          enum:
          - "MR"
          - "MRS"
          - "MS"
          - "DR"
          - "MISS"
          - "UNKNOWN"
        contact:
          $ref: "#/components/schemas/Contact"
        fullName:
          type: "string"
        age:
          type: "integer"
          format: "int32"
      required:
      - "id"
      - "firstName"
      - "lastName"
      - "dob"
      - "maritalStatus"
      - "honorific"
      - "fullName"
    HashMap:
      type: "object"
      properties: {}
    HashMap_String:
      type: "string"
    LocalDateTime:
      type: "object"
      properties: {}
    ServerCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        machineId:
          type: "integer"
          format: "int32"
        deploymentType:
          type: "string"
          enum:
          - "DEV"
          - "TEST"
          - "PROD"
        developmentModeEnabled:
          type: "boolean"
        protocol:
          type: "string"
        host:
          type: "string"
        allowedHosts:
          type: "array"
          items:
            type: "string"
        utc:
          $ref: "#/components/schemas/LocalDateTime"
        local:
          $ref: "#/components/schemas/LocalDateTime"
      required:
      - "errors"
      - "deploymentType"
      - "protocol"
      - "host"
      - "allowedHosts"
      - "utc"
      - "local"
    SecurityCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        jwtEnabled:
          type: "boolean"
        basicAuthEnabled:
          type: "boolean"
        publicApiRateLimit:
          type: "integer"
          format: "int32"
        publicApiRateRefillMs:
          type: "integer"
          format: "int64"
        newTokenRateLimit:
          type: "integer"
          format: "int32"
        newTokenRateRefillMs:
          type: "integer"
          format: "int64"
      required:
      - "errors"
    Datasource:
      type: "object"
      properties:
        totalConnections:
          type: "integer"
          format: "int32"
        activeConnections:
          type: "integer"
          format: "int32"
        idleConnections:
          type: "integer"
          format: "int32"
        threadsAwaitingConnection:
          type: "integer"
          format: "int32"
        connectionTimeout:
          type: "integer"
          format: "int64"
        maxLifetime:
          type: "integer"
          format: "int64"
        keepaliveTime:
          type: "integer"
          format: "int64"
        maxPoolSize:
          type: "integer"
          format: "int32"
    ConnectionTest:
      type: "object"
      properties:
        established:
          type: "boolean"
        name:
          type: "string"
        version:
          type: "string"
        dialect:
          type: "string"
        url:
          type: "string"
        vendor:
          type: "string"
        autoCommit:
          type: "boolean"
        catalog:
          type: "string"
      required:
      - "name"
      - "version"
      - "dialect"
      - "url"
      - "vendor"
      - "catalog"
    Configuration:
      type: "object"
      properties:
        poolSize:
          type: "integer"
          format: "int32"
        jdbcDriver:
          type: "string"
        jdbcUrl:
          type: "string"
      required:
      - "jdbcDriver"
      - "jdbcUrl"
    DatabaseCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        alive:
          type: "boolean"
        datasource:
          $ref: "#/components/schemas/Datasource"
        connectionTest:
          $ref: "#/components/schemas/ConnectionTest"
        configuration:
          $ref: "#/components/schemas/Configuration"
      required:
      - "errors"
      - "configuration"
    ApplicationCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        apiVersion:
          type: "string"
        docsEnabled:
          type: "boolean"
      required:
      - "errors"
      - "apiVersion"
    GraphQLCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        enabled:
          type: "boolean"
        framework:
          type: "string"
          enum:
          - "EXPEDIA_GROUP"
          - "K_GRAPHQL"
        playground:
          type: "boolean"
        dumpSchema:
          type: "boolean"
      required:
      - "errors"
      - "framework"
    SnowflakeData:
      type: "object"
      properties:
        machineId:
          type: "integer"
          format: "int32"
        sequence:
          type: "integer"
          format: "int64"
        utc:
          $ref: "#/components/schemas/LocalDateTime"
        local:
          $ref: "#/components/schemas/LocalDateTime"
      required:
      - "utc"
      - "local"
    SnowflakeCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        testId:
          type: "string"
        testResult:
          $ref: "#/components/schemas/SnowflakeData"
        timestampEpoch:
          type: "integer"
          format: "int64"
        nanoTimeStart:
          type: "integer"
          format: "int64"
      required:
      - "errors"
    HealthCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        server:
          $ref: "#/components/schemas/ServerCheck"
        security:
          $ref: "#/components/schemas/SecurityCheck"
        database:
          $ref: "#/components/schemas/DatabaseCheck"
        application:
          $ref: "#/components/schemas/ApplicationCheck"
        graphQL:
          $ref: "#/components/schemas/GraphQLCheck"
        snowflake:
          $ref: "#/components/schemas/SnowflakeCheck"
        endpoints:
          type: "array"
          items:
            type: "string"
      required:
      - "errors"
      - "server"
      - "security"
      - "database"
      - "application"
      - "graphQL"
      - "snowflake"
      - "endpoints"
    EmployeeFilterSet:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        honorific:
          type: "array"
          items:
            type: "string"
            enum:
            - "MR"
            - "MRS"
            - "MS"
            - "DR"
            - "MISS"
            - "UNKNOWN"
        maritalStatus:
          type: "array"
          items:
            type: "string"
            enum:
            - "MARRIED"
            - "SINGLE"
            - "DIVORCED"
            - "UNKNOWN"
    Info:
      type: "object"
      properties:
        totalPages:
          type: "integer"
          format: "int32"
        pageIndex:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int32"
        elementsPerPage:
          type: "integer"
          format: "int32"
        elementsInPage:
          type: "integer"
          format: "int32"
        hasNext:
          type: "boolean"
        hasPrevious:
          type: "boolean"
    Page:
      type: "object"
      properties:
        content:
          type: "array"
        info:
          $ref: "#/components/schemas/Info"
      required:
      - "content"
      - "info"
    Page_? extends Employee:
      type: "object"
      properties:
        content:
          type: "array"
          items:
            type: "object"
        info:
          $ref: "#/components/schemas/Info"
    Period:
      type: "object"
      properties:
        startDate:
          $ref: "#/components/schemas/LocalDate"
        endDate:
          $ref: "#/components/schemas/LocalDate"
        comments:
          type: "string"
      required:
      - "startDate"
    Employment:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        period:
          $ref: "#/components/schemas/Period"
        probationEndDate:
          $ref: "#/components/schemas/LocalDate"
        workModality:
          type: "string"
          enum:
          - "ON_SITE"
          - "REMOTE"
          - "HYBRID"
        employee:
          $ref: "#/components/schemas/Employee"
      required:
      - "id"
      - "period"
      - "workModality"
      - "employee"
    EmploymentRequest:
      type: "object"
      properties:
        period:
          $ref: "#/components/schemas/Period"
        probationEndDate:
          $ref: "#/components/schemas/LocalDate"
        workModality:
          type: "string"
          enum:
          - "ON_SITE"
          - "REMOTE"
          - "HYBRID"
      required:
      - "period"
      - "workModality"
    Function1_? super Employment:
      type: "object"